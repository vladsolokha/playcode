'''
Pentagonal numbers are generated by
P(n) = 1/2 * n * (3 * n - 1)
giving the sequence
1, 5, 12, 22, 35, 51, 70, 92, ...
Some pentagonal numbers can be expressed by sum of 2 other pentagonal numbers
P(8) = 92 = 22 + 70 = P(4) + P(7)
3577 is smallest pentagonal number that can be expressed as sum of 
two pentagonal numbers 2 different ways:
P(49) = 3577 = 3432 + 145 = P(48) + P(10)
               3290 + 287 = P(47) + P(14)
107602 is smallest pentagonal number that can be expressed as sum of 
two pentagonal numbers 3 different ways.

find the smallest pentagonal number that can be expressed as sum of 
two pentagonal numbers in over 100 different ways

create function to get list of pentagonal numbers
smallest pentagonal number means start from largest target number
get next smallest number (n-1) and check add starting at first number
    if there is sum count inc
get (n-2) and check add starting at first number
keep going until you get count = 100 sums
'''
def pent_List(n):
    a = []
    for i in range(1, n+1):
        a.append(int(1/2 * i * ( 3 * i - 1 )))
    return a
p = (pent_List(500))

first = 0
last = -2
target = 0
count = 0
while target <= len(p)-2:
    while last >= -len(p)+1:
        while first < len(p)//2:
            if (p[last] + p[first]) == p[target]:
                count += 1
                print('found ', count, ' different ways for ', p[target], ' p(', target+1,')')
                last -= 1 # check next last value since sum found
                first = 0
            first += 1 # increse first when no sum found
        last -= 1
        first = 0
    count = 0
    target += 1
    last = -2 
    first = 0